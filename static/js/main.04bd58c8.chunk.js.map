{"version":3,"sources":["components/form.js","components/Todo.js","components/TodoList.js","components/Filters.js","App.js","index.js"],"names":["AddingForm","setTodos","useState","query","setQuery","onSubmit","event","preventDefault","current","id","Date","title","trim","completed","type","className","placeholder","value","onChange","target","trimLeft","Todo","onEditStatus","setEditStatus","todoText","setTodoText","removeTodo","x","filter","elem","onBlur","map","classnames","editing","checked","todo","onDoubleClick","onClick","autoFocus","onKeyDown","key","TodoList","todos","Filters","FILTERS","setFilter","href","all","active","App","useEffect","localStorage","JSON","parse","getItem","setItem","stringify","length","every","htmlFor","todosArray","todosFilter","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.04bd58c8.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddingForm = ({ setTodos }) => {\n  const [query, setQuery] = useState('');\n\n  const handleFormSubmit = (event) => {\n    event.preventDefault();\n    if (!query) {\n      return;\n    }\n\n    setTodos(current => (\n      [\n        ...current,\n        { id: +new Date(),\n          title: query.trim(),\n          completed: false },\n      ]\n    ));\n    setQuery('');\n  };\n\n  return (\n    <form\n      onSubmit={handleFormSubmit}\n    >\n      <input\n        type=\"text\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        value={query}\n        onChange={({ target }) => {\n          setQuery(target.value.trimLeft());\n        }}\n      />\n    </form>\n  );\n};\n\nAddingForm.propTypes = {\n  setTodos: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nexport function Todo({\n  title,\n  completed,\n  id,\n  setTodos,\n}) {\n  const [onEditStatus, setEditStatus] = useState(false);\n  const [todoText, setTodoText] = useState(title);\n\n  const removeTodo = x => (\n    setTodos(current => [...current].filter(elem => elem.id !== id))\n  );\n\n  const changeCheckbox = () => {\n    setTodos(current => current.map((todo) => {\n      if (todo.id === id) {\n        return { ...todo, completed: !todo.completed };\n      }\n\n      return todo;\n    }));\n  };\n\n  const onKeyPush = (key) => {\n    if (key === 'Enter') {\n      onBlur();\n    } else if (key === 'Escape') {\n      setTodoText(title);\n      setEditStatus(false);\n    }\n  };\n\n  const onBlur = () => {\n    if (!todoText) {\n      removeTodo(id);\n      setEditStatus(false);\n    } else {\n      setTodoText(todoText.trim());\n      setTodos(current => [...current].map((elem) => {\n        if (elem.id === id) {\n          return { ...elem, title: todoText };\n        }\n\n        return elem;\n      }));\n      setEditStatus(false);\n    }\n  };\n\n  return (\n    <li className={classnames({\n      completed,\n      editing: onEditStatus,\n    })}\n    >\n      <div>\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={completed}\n          onChange={() => changeCheckbox()}\n        />\n        {!onEditStatus && (\n          <label\n            onDoubleClick={() => setEditStatus(true)}\n          >\n            {title}\n          </label>\n        )}\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => removeTodo(id)}\n        />\n      </div>\n      {onEditStatus && (\n        <input\n          autoFocus\n          type=\"text\"\n          className=\"edit\"\n          value={todoText}\n          onChange={event => setTodoText(event.target.value.trimLeft())}\n          onKeyDown={event => onKeyPush(event.key)}\n          onBlur={onBlur}\n        />\n      )}\n    </li>\n  );\n}\n\nTodo.propTypes = {\n  completed: PropTypes.bool.isRequired,\n  title: PropTypes.string.isRequired,\n  id: PropTypes.number.isRequired,\n  setTodos: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { Todo } from './Todo';\n\nexport function TodoList({\n  todos,\n  setTodos,\n}) {\n  return (\n    todos.map(elem => (\n      <Todo\n        key={elem.id}\n        {...elem}\n        setTodos={setTodos}\n        todos={todos}\n      />\n    ))\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport function Filters({\n  filter,\n  FILTERS,\n  setFilter,\n}) {\n  return (\n    <ul className=\"filters\">\n      <li>\n        <a\n          href=\"#/\"\n          className={`${filter === 'all' ? 'selected' : null}`}\n          onClick={() => setFilter(FILTERS.all)}\n        >\n          All\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/active\"\n          className={`${filter === 'active' ? 'selected' : null}`}\n          onClick={() => setFilter(FILTERS.active)}\n        >\n          Active\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/completed\"\n          className={`${filter === 'completed' ? 'selected' : null}`}\n          onClick={() => setFilter(FILTERS.completed)}\n        >\n          Completed\n        </a>\n      </li>\n    </ul>\n  );\n}\n\nFilters.propTypes = {\n  filter: PropTypes.bool.isRequired,\n  setFilter: PropTypes.func.isRequired,\n  FILTERS: PropTypes.shape({\n    all: PropTypes.string.isRequired,\n    active: PropTypes.string.isRequired,\n    completed: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport { AddingForm } from './components/form';\nimport { TodoList } from './components/TodoList';\nimport { Filters } from './components/Filters';\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [filter, setFilter] = useState('all');\n\n  useEffect(() => {\n    if (localStorage.todos) {\n      setTodos(JSON.parse(localStorage.getItem('todos')));\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  }, [todos]);\n\n  const FILTERS = {\n    all: 'all',\n    active: 'active',\n    completed: 'completed',\n  };\n\n  const completedTodosCounter = x => (x\n    .filter(elem => !elem.completed).length);\n\n  const clearCompleted = () => (\n    setTodos(current => [...current].filter(elem => !elem.completed))\n  );\n\n  const todosFilter = (todosArray) => {\n    switch (filter) {\n      case FILTERS.active:\n        return todosArray.filter(elem => elem.completed === false);\n      case FILTERS.completed:\n        return todosArray.filter(elem => elem.completed === true);\n      default:\n        return todosArray;\n    }\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <AddingForm setTodos={setTodos} />\n        <h1>todos App</h1>\n      </header>\n      {todos.length !== 0 && (\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            checked={todos.every(todo => todo.completed)}\n            onChange={({ target }) => {\n              setTodos(\n                todos.map((todo) => {\n                  if (todo.completed === target.checked) {\n                    return todo;\n                  }\n\n                  return { ...todo, completed: !todo.completed };\n                }),\n              );\n            }}\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n          <ul className=\"todo-list\">\n            <TodoList\n              todos={todosFilter(todos)}\n              setTodos={setTodos}\n            />\n\n          </ul>\n        </section>\n      )}\n\n      {todos.length !== 0\n        && (\n          <footer className=\"footer\">\n            <span className=\"todo-count\">\n              {`${completedTodosCounter(todos)} items left`}\n            </span>\n\n            <Filters\n              FILTERS={FILTERS}\n              setFilter={setFilter}\n              filter={filter}\n            />\n\n            <button\n              type=\"button\"\n              className=\"clear-completed\"\n              onClick={() => clearCompleted()}\n            >\n              Clear completed\n            </button>\n          </footer>\n        )}\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}