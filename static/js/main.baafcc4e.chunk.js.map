{"version":3,"sources":["components/form.tsx","components/Todo.tsx","components/TodoList.tsx","components/constants.ts","components/Filters.tsx","App.tsx","index.tsx"],"names":["AddingForm","todos","setTodos","useState","query","setQuery","onSubmit","event","preventDefault","id","Date","title","trim","completed","type","className","placeholder","value","onChange","target","trimLeft","Todo","onEditStatus","setEditStatus","todoText","setTodoText","removeTodo","filter","elem","onBlur","map","classnames","editing","checked","htmlFor","onDoubleClick","onClick","onKeyDown","key","TodoList","FILTERS","all","active","Filters","setFilter","Object","keys","href","toUpperCase","slice","App","x","useEffect","localStorage","JSON","parse","getItem","setItem","stringify","length","every","todo","todosArray","todosFilter","some","current","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.baafcc4e.chunk.js","sourcesContent":["import React, { useState, FormEvent } from 'react';\nimport { InTodo } from './Todo';\n\ninterface InAddingFormData {\n  setTodos: (current: InTodo[]) => void;\n  todos: InTodo[];\n}\n\nexport const AddingForm = ({ todos, setTodos }: InAddingFormData) => {\n  const [query, setQuery] = useState<string>('');\n  const handleFormSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (!query) {\n      return;\n    }\n\n    setTodos(\n      [\n        ...todos,\n        {\n          id: +new Date(),\n          title: query.trim(),\n          completed: false,\n        },\n      ],\n    );\n    setQuery('');\n  };\n\n  return (\n    <form\n      onSubmit={handleFormSubmit}\n    >\n      <input\n        type=\"text\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        value={query}\n        onChange={({ target }) => {\n          setQuery(target.value.trimLeft());\n        }}\n      />\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport classnames from 'classnames';\n\nexport type InTodo = {\n  id: number;\n  title: string;\n  completed: boolean;\n};\n\ninterface InTodoData {\n  id: number;\n  title: string;\n  completed: boolean;\n  setTodos: (x: InTodo[]) => void;\n  todos: InTodo[];\n  // ((current: InTodo[]) => void) => void;\n\n}\n\nexport function Todo({\n  title,\n  completed,\n  id,\n  setTodos,\n  todos,\n}: InTodoData) {\n  const [onEditStatus, setEditStatus] = useState<boolean>(false);\n  const [todoText, setTodoText] = useState<string>(title);\n\n  const removeTodo = () => (\n    setTodos(todos.filter(elem => elem.id !== id))\n  );\n\n  const changeCheckbox = () => {\n    setTodos(todos.map((elem: InTodo) => {\n      if (elem.id === id) {\n        return { ...elem, completed: !elem.completed };\n      }\n\n      return elem;\n    }));\n  };\n\n  const onBlur = () => {\n    if (!todoText) {\n      removeTodo();\n      setEditStatus(false);\n    } else {\n      setTodoText(todoText.trim());\n      setTodos(todos.map((elem: InTodo) => {\n        if (elem.id === id) {\n          return { ...elem, title: todoText };\n        }\n\n        return elem;\n      }));\n      setEditStatus(false);\n    }\n  };\n\n  const onKeyPush = (key: string) => {\n    if (key === 'Enter') {\n      onBlur();\n    } else if (key === 'Escape') {\n      setTodoText(title);\n      setEditStatus(false);\n    }\n  };\n\n  return (\n    <li className={classnames({\n      completed,\n      editing: onEditStatus,\n    })}\n    >\n      <div>\n        <input\n          id=\"id\"\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={completed}\n          onChange={() => changeCheckbox()}\n        />\n\n        {!onEditStatus && (\n          <label\n            htmlFor=\"id\"\n            onDoubleClick={() => setEditStatus(true)}\n          >\n            {title}\n          </label>\n        )}\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => removeTodo()}\n        >\n          x\n        </button>\n      </div>\n      {onEditStatus && (\n        <input\n          type=\"text\"\n          className=\"edit\"\n          value={todoText}\n          onChange={event => setTodoText(event.target.value.trimLeft())}\n          onKeyDown={event => onKeyPush(event.key)}\n          onBlur={onBlur}\n        />\n      )}\n    </li>\n  );\n}\n\n// Todo.propTypes = {\n//   completed: PropTypes.bool.isRequired,\n//   title: PropTypes.string.isRequired,\n//   id: PropTypes.number.isRequired,\n//   setTodos: PropTypes.func.isRequired,\n// };\n","import React from 'react';\nimport { Todo, InTodo } from './Todo';\n\ninterface InTodoListData {\n  todos: InTodo[];\n  setTodos: (x: InTodo[]) => void;\n}\nexport function TodoList({\n  todos,\n  setTodos,\n}: InTodoListData) {\n  return (\n    <>\n      {todos.map((elem: InTodo) => (\n        <Todo\n          key={elem.id}\n          {...elem}\n          setTodos={setTodos}\n          todos={todos}\n        />\n      ))}\n    </>\n  );\n}\n","export const FILTERS = {\n  all: 'all',\n  active: 'active',\n  completed: 'completed',\n};\n","import React from 'react';\n\nexport type InFILTERS = {\n  all: string;\n  active: string;\n  completed: string;\n};\n\ntype InFilterData = {\n  filter: string;\n  FILTERS: InFILTERS;\n  setFilter: (x: string) => void;\n};\n\nexport function Filters({\n  filter,\n  FILTERS,\n  setFilter,\n}: InFilterData) {\n  return (\n    <ul className=\"filters\">\n      {Object.keys(FILTERS).map((elem: string) => (\n        <li key={elem}>\n          <a\n            href=\"#/\"\n            className={`${filter === elem ? 'selected' : null}`}\n            onClick={() => setFilter(elem)}\n          >\n            {elem[0].toUpperCase() + elem.slice(1)}\n          </a>\n        </li>\n      ))}\n    </ul>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport { AddingForm } from './components/form';\nimport { TodoList } from './components/TodoList';\nimport { FILTERS } from './components/constants';\nimport { Filters } from './components/Filters';\nimport { InTodo } from './components/Todo';\n\nfunction App() {\n  const [todos, setTodos] = useState<InTodo[]>([]);\n  const [filter, setFilter] = useState<string>(FILTERS.all);\n\n  useEffect(() => {\n    if (localStorage.todos) {\n      setTodos(JSON.parse(localStorage.getItem('todos') || '[]'));\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  }, [todos]);\n\n  const completedTodosCounter = (x: InTodo[]) => (x\n    .filter((elem: InTodo) => !elem.completed).length);\n\n  const clearCompleted = () => (\n    setTodos((current: InTodo[]) => current.filter(elem => !elem.completed))\n  );\n\n  const todosFilter = (todosArray: InTodo[]) => {\n    switch (filter) {\n      case FILTERS.active:\n        return todosArray.filter((elem: InTodo) => elem.completed === false);\n      case FILTERS.completed:\n        return todosArray.filter((elem: InTodo) => elem.completed === true);\n      default:\n        return todosArray;\n    }\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <AddingForm\n          setTodos={setTodos}\n          todos={todos}\n        />\n        <h1>todos App</h1>\n      </header>\n      {todos.length !== 0 && (\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            checked={todos.every((todo: InTodo) => todo.completed)}\n            onChange={({ target }) => {\n              setTodos(\n                todos.map((todo: InTodo) => {\n                  if (todo.completed === target.checked) {\n                    return todo;\n                  }\n\n                  return { ...todo, completed: !todo.completed };\n                }),\n              );\n            }}\n          />\n          <label htmlFor=\"toggle-all\"/>\n\n          <ul className=\"todo-list\">\n            <TodoList\n              todos={todosFilter(todos)}\n              setTodos={setTodos}\n            />\n\n          </ul>\n        </section>\n      )}\n\n      {todos.length !== 0\n        && (\n          <footer className=\"footer\">\n            <span className=\"todo-count\">\n              {`${completedTodosCounter(todos)} ${todos\n                .filter(elem => !elem.completed)\n                .length === 1 ? 'item' : 'items'} left`}\n            </span>\n\n            <Filters\n              FILTERS={FILTERS}\n              setFilter={setFilter}\n              filter={filter}\n            />\n\n            {todos.some(todo => todo.completed) && (\n              <button\n                type=\"button\"\n                className=\"clear-completed\"\n                onClick={() => clearCompleted()}\n              >\n                Clear completed\n              </button>\n            )}\n          </footer>\n        )}\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}